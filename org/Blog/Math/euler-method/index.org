#+TITLE: Euler Method
#+DATE: <2021-07-02 Wed>
#+FILETAGS: :Math:

/Derivation of forward euler method for a [[../../../projects/JS_and_WebGL/collision_study/refactor][small project]]/

* Derivation
  ---------------------------------

  Numerically integrating an ordinary differential equation of motion of a particle using the Euler method:

  The limit representation of a derivative:

  $$ {f(x)}^\prime = \lim_{h \to 0} \frac {f(x + h) - f(x)}{h}$$

  Where $h$ is some infinitesimal change in a continuous variable. 

  For an equation of motion in a simulation, $h$ is time $t$,
  the discrete physics time step or change in time for a physics cycle.

  $$ {f(t)}^\prime \approx \frac {f(t + {\Delta t}) - f(t)}{\Delta t}$$

  Algebraically rearranging for the function at the next time step $f(x + {\Delta t})$:

  $$ f(t + {\Delta t}) \approx {f(t)}^\prime {\Delta t}  + f(t)  $$

  That is to say, we can approximate the value of the next step of a function 
  if we have its value and the value of its derivative
  at the current time step.

  We can apply this in a simnple simulation after resolving the acceleration of a cycle by working backward.

  In general, for position $\vec r$:

  $$\vec v = \frac{d}{dt} \vec r$$
  $$\vec a = \frac{d}{dt} \vec v$$
  $$\implies v(t + \Delta t) \approx {v(t)}^\prime {\Delta t}  + v(t)$$

  $$v(t + \Delta t) \approx a(t) {\Delta t}  + v(t)$$

  similarly:
  $$r(t + \Delta t) \approx {r(t)}^\prime {\Delta t}  + r(t)$$
  $$r(t + \Delta t) \approx v(t) {\Delta t}  + r(t)$$


  #+BEGIN_SRC cpp
    // After resolving acceleration

    rigidBody.velocity += acceleration;
    rigidBody.position += velocity;

  #+END_SRC
  ---------------------------------

  Note:
  The same result can be found by using a Taylor expansion around the next time step and truncating second order and higher terms.

